[gd_scene load_steps=19 format=3 uid="uid://k65gofqxhrqg"]

[ext_resource type="PackedScene" uid="uid://c5cgl6xu3ctsd" path="res://player/player.tscn" id="1_80vhd"]
[ext_resource type="PackedScene" uid="uid://bxyk686eqdio2" path="res://objects/button.tscn" id="2_hjsbj"]
[ext_resource type="PackedScene" uid="uid://cec2hye8etmji" path="res://objects/furniture/table.tscn" id="3_cwqvt"]
[ext_resource type="PackedScene" uid="uid://dtsc1q5xvs0ed" path="res://objects/misc/entry_page.tscn" id="4_5mrsh"]
[ext_resource type="Script" uid="uid://djojbvaf3gilq" path="res://levels/ReadableUI.gd" id="5_safpt"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_80vhd"]
sky_horizon_color = Color(0.66224277, 0.6717428, 0.6867428, 1)
ground_horizon_color = Color(0.66224277, 0.6717428, 0.6867428, 1)

[sub_resource type="Sky" id="Sky_hjsbj"]
sky_material = SubResource("ProceduralSkyMaterial_80vhd")

[sub_resource type="Environment" id="Environment_cwqvt"]
background_mode = 2
sky = SubResource("Sky_hjsbj")
tonemap_mode = 2
glow_enabled = true

[sub_resource type="BoxShape3D" id="BoxShape3D_umreq"]
size = Vector3(15, 1, 15)

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_5mrsh"]

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_safpt"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_gjl0y"]
render_priority = 2
diffuse_mode = 3
specular_mode = 1
albedo_color = Color(0.16757113, 0.11080197, 0.05030857, 1)
normal_texture = SubResource("CompressedTexture2D_safpt")
heightmap_texture = SubResource("CompressedTexture2D_5mrsh")
uv1_scale = Vector3(2, 2, 2)

[sub_resource type="BoxMesh" id="BoxMesh_80vhd"]
size = Vector3(15, 1, 15)

[sub_resource type="Shader" id="Shader_vnv7o"]
code = "// Edge Detector with Sobel kernel
//
// Copyright Mark McKay 2025

// Reference
// https://github.com/KodyJKing/hello-threejs/blob/main/src/RenderPixelatedPass.ts
// https://godotshaders.com/shader/simple-sobel-filter/

// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the \"Software\"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

shader_type spatial;
render_mode unshaded, fog_disabled, depth_draw_never;

uniform sampler2D depth_texture : hint_depth_texture, repeat_disable;
uniform sampler2D norm_rough_texture : hint_normal_roughness_texture, repeat_disable;

uniform vec4 line_color : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 background_color : source_color = vec4(1.0, 1.0, 1.0, 0.0);

uniform int detect_type : hint_enum(\"COMBINED\", \"NORMAL_ONLY\", \"DEPTH_ONLY\");

uniform bool map_quad_to_viewport = false;
uniform int kernel_radius:hint_range(1, 100, 1) = 1;

uniform float normal_cutoff = .5;
uniform float normal_cutoff_radius:hint_range(0, 10, .001) = .1;

uniform float depth_cutoff = .5;
uniform float depth_cutoff_radius:hint_range(0, 10, .001) = .1;

void vertex() {
	if (map_quad_to_viewport)
		//Reposition 2x2 quad at origin to cover viewport
		POSITION = vec4(-VERTEX.x * 2.0, VERTEX.y * 2.0, 1.0, 1.0);
	else
		//Default model view projection
		POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX, 1.0);
}

float sobel_kernel_x(ivec2 pos) {
	//https://stackoverflow.com/questions/9567882/sobel-filter-kernel-of-large-size
	return float(pos.x) / float(pos.x * pos.x + pos.y * pos.y);
}

float sobel_kernel_y(ivec2 pos) {
	//https://stackoverflow.com/questions/9567882/sobel-filter-kernel-of-large-size
	return float(pos.y) / float(pos.x * pos.x + pos.y * pos.y);
}

void fragment() {
	float depth_dx_sum = 0.0;
	float depth_dy_sum = 0.0;
	vec3 normal_dx_sum = vec3(0, 0, 0);
	vec3 normal_dy_sum = vec3(0, 0, 0);
	float kernel_abs_sum = 0.0;

	for (int j = -kernel_radius; j <= kernel_radius; ++j)
		for (int i = -kernel_radius; i <= kernel_radius; ++i)
		{
			if (i == 0 && j == 0)
				continue;

			//Normal
			ivec2 offset_co = ivec2(i, j);
			float kx = sobel_kernel_x(offset_co);
			float ky = sobel_kernel_y(offset_co);
			kernel_abs_sum += abs(kx);

			vec3 normal = texelFetch(norm_rough_texture,
				ivec2(SCREEN_UV * VIEWPORT_SIZE) + offset_co, 0).rgb * 2.0 - 1.0;
			normal_dx_sum += normal * kx;
			normal_dy_sum += normal * ky;

			//Depth
			float depth = texelFetch(depth_texture, ivec2(SCREEN_UV * VIEWPORT_SIZE) + offset_co, 0).r;
			vec4 upos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, depth, 1.0);
			upos.xyz /= upos.w;
			//Position of fragment relative to camera
			vec3 pixel_pos = upos.xyz;
			float linear_depth = -pixel_pos.z;

			depth_dx_sum += linear_depth * kx;
			depth_dy_sum += linear_depth * ky;
		}

	float normal_mask = (length(normal_dx_sum) + length(normal_dy_sum)) / kernel_abs_sum;
	float depth_mask = sqrt(depth_dx_sum * depth_dx_sum + depth_dy_sum * depth_dy_sum);

	if (detect_type == 1) {
		vec4 final_normals_col = mix(background_color, line_color,
			smoothstep(normal_cutoff - normal_cutoff_radius, normal_cutoff + normal_cutoff_radius, normal_mask));
		ALBEDO = final_normals_col.rgb;
		ALPHA = final_normals_col.a;
	}
	else if (detect_type == 2) {
		vec4 final_depth_col = mix(background_color, line_color,
			smoothstep(depth_cutoff - depth_cutoff_radius, depth_cutoff + depth_cutoff_radius, depth_mask));
		ALBEDO = final_depth_col.rgb;
		ALPHA = final_depth_col.a;
	}
	else {
		vec4 final_col = mix(background_color, line_color,
			smoothstep(normal_cutoff - normal_cutoff_radius, normal_cutoff + normal_cutoff_radius, normal_mask) +
			smoothstep(depth_cutoff - depth_cutoff_radius, depth_cutoff + depth_cutoff_radius, depth_mask)
			);
		ALBEDO = final_col.rgb;
		ALPHA = final_col.a;
	}

}

//void light() {
//	// Called for every pixel for every light affecting the material.
//	// Uncomment to replace the default light processing function with this one.
//}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5mrsh"]
render_priority = 1
shader = SubResource("Shader_vnv7o")
shader_parameter/line_color = Color(0, 0, 0, 1)
shader_parameter/background_color = Color(1, 1, 1, 0)
shader_parameter/detect_type = 0
shader_parameter/map_quad_to_viewport = true
shader_parameter/kernel_radius = 1
shader_parameter/normal_cutoff = 0.5
shader_parameter/normal_cutoff_radius = 0.0
shader_parameter/depth_cutoff = 5.0
shader_parameter/depth_cutoff_radius = 0.1

[sub_resource type="QuadMesh" id="QuadMesh_safpt"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_5mrsh"]
bg_color = Color(0.23137255, 0.23137255, 0.23137255, 0.56078434)

[sub_resource type="CanvasTexture" id="CanvasTexture_5mrsh"]

[node name="level" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_cwqvt")

[node name="floor" type="StaticBody3D" parent="."]

[node name="CollisionShape3D" type="CollisionShape3D" parent="floor"]
shape = SubResource("BoxShape3D_umreq")

[node name="MeshInstance3D" type="MeshInstance3D" parent="floor"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.09546614, 0.024503231, -0.066125154)
material_override = SubResource("StandardMaterial3D_gjl0y")
mesh = SubResource("BoxMesh_80vhd")

[node name="player" parent="." instance=ExtResource("1_80vhd")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.5067227, 0)

[node name="OmniLight3D" type="OmniLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5.9353886, 1.6224339, -0.31583303)
light_color = Color(0.99215686, 0.3764706, 0.20392157, 1)
light_energy = 14.922
omni_range = 545.457

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.6759562, 6.2978334)
visible = false
material_override = SubResource("ShaderMaterial_5mrsh")
custom_aabb = AABB(-50000, -50000, -50000, 1000000, 1000000, 1000000)
mesh = SubResource("QuadMesh_safpt")

[node name="Node3D" parent="." instance=ExtResource("3_cwqvt")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.005668, 0.5, 2.5855238)

[node name="furniture" type="Node3D" parent="."]

[node name="button" parent="furniture" instance=ExtResource("2_hjsbj")]
transform = Transform3D(0.6733094, -0.7393608, -3.231849e-08, 0, -4.371139e-08, 1, -0.7393608, -0.6733094, -2.9431284e-08, 4.878536, 1.5291095, 4.8649282)

[node name="button2" parent="furniture" instance=ExtResource("2_hjsbj")]
transform = Transform3D(0.53990245, 0.84172755, 3.6793075e-08, 0, -4.371139e-08, 1, 0.84172755, -0.53990245, -2.3599885e-08, -5.107113, 1.5291095, 4.8649282)

[node name="entry page" parent="furniture" instance=ExtResource("4_5mrsh")]
transform = Transform3D(0.81930214, 0, 0.573362, 0, 1, 0, -0.573362, 0, 0.81930214, 0.18069726, 1.6454724, 2.564314)

[node name="ReadableUI" type="CanvasLayer" parent="."]
unique_name_in_owner = true
script = ExtResource("5_safpt")

[node name="Panel" type="Panel" parent="ReadableUI"]
offset_right = 1149.0
offset_bottom = 651.0

[node name="RightContainer" type="VBoxContainer" parent="ReadableUI/Panel"]
layout_mode = 0
offset_left = 741.0
offset_top = 74.0
offset_right = 1053.0
offset_bottom = 555.0

[node name="TitleLabel" type="RichTextLabel" parent="ReadableUI/Panel/RightContainer"]
layout_mode = 2
focus_mode = 2
text = "Title Placeholder"
fit_content = true
scroll_active = false
horizontal_alignment = 1
selection_enabled = true

[node name="AuthorLabel" type="RichTextLabel" parent="ReadableUI/Panel/RightContainer"]
layout_mode = 2
focus_mode = 2
theme_override_font_sizes/normal_font_size = 12
text = "By: Author Placeholder"
fit_content = true
scroll_active = false
horizontal_alignment = 1
selection_enabled = true

[node name="SummaryPanel" type="Panel" parent="ReadableUI/Panel"]
layout_mode = 0
offset_left = 741.0
offset_top = 122.0
offset_right = 1053.0
offset_bottom = 538.0
theme_override_styles/panel = SubResource("StyleBoxFlat_5mrsh")

[node name="SummaryContainer" type="VBoxContainer" parent="ReadableUI/Panel/SummaryPanel"]
layout_mode = 0
offset_right = 310.0
offset_bottom = 416.0

[node name="SummaryText" type="RichTextLabel" parent="ReadableUI/Panel/SummaryPanel/SummaryContainer"]
layout_mode = 2
text = "This is a placeholder for the text"
fit_content = true

[node name="Paper" type="TextureRect" parent="ReadableUI/Panel"]
layout_mode = 1
anchors_preset = 4
anchor_top = 0.5
anchor_bottom = 0.5
offset_left = 100.0
offset_top = -261.5
offset_right = 541.0
offset_bottom = 293.5
grow_vertical = 2
texture = SubResource("CanvasTexture_5mrsh")

[node name="PaperText" type="RichTextLabel" parent="ReadableUI/Panel/Paper"]
layout_mode = 1
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -189.5
offset_top = 13.08
offset_right = 200.5
offset_bottom = 59.08
grow_horizontal = 2
theme_override_colors/default_color = Color(0, 0, 0, 1)
text = "ergnjergoerhogherioghioerhgioerjgioejgioejriogjgiowjoigjrioegjreoigjioerjwgiojeriog"
fit_content = true
